Start = DecList

DecList = Dec+
Dec = FuncDec::dec / VarDec::dec / TemplateDec::dec / ClassDec::dec / JsImportDec::dec / JsExportDec::dec / OperDec::dec

VarDecNoInit = "Deklarieren" "Sie" "die" "Variable" Var "vom" "Typ" Type "."
VarDecInit = "Initialisierung" "der" "Variablen" Var "vom" "Typ" Type "mit" Exp "."
VarDec = VarDecNoInit::vardec / VarDecInit::vardec
FuncDec = "Deklarieren" "Sie" "die" "Funktion" Var "," "die" Fieldlist::params "annimmt" "und" Fieldlist::result "zurückgibt" "von" "hier" "aus" StmList "bis" "hierher" / "Funktion" ID "deklarieren" "." "von" "hier" "aus" StmList "bis" "hierher"
TemplateDec = "template" "<" IDList ">" ":" Dec
ClassDec = "class" ":" ID "{" ClassMemberList "}" / "class" ":" ID "<-" IDList "{" ClassMemberList "}"
JsImportDec = "function" ":" ID "(" FieldList::params ")" "=>" "(" FieldList::result ")" "=" "jsload" "(" String::module "," String::name ")" ";"
JsExportDec = "jsexport" "(" ID "," String ")" ";"
OperDec = "operator" ":" ID "(" FieldList::params ")" "=>" "(" FieldList::result ")" "{" StmList "}"

ClassMemberList = (PublicMembers::members / PrivateMembers::members)+
PublicMembers = "public" ":" DecList / DecList
PrivateMembers = "private" ":" DecList

FieldList = (Field)* ("," Field)*
Field = Type ":" Var

ExpList = (Exp::exp)* ("," Exp::exp)*
Exp = BinOpExp::exp
BinOpExp = CompOpExp::exp ((AndOp::op / OrOp::op) CompOpExp::exp)*
CompOpExp = SumExp::exp ((EqOp::op / NeOp::op / LtOp::op / LeOp::op / GtOp::op / GeOp::op) SumExp::exp)*
SumExp = ProdExp::exp ((AddOp::op / SubOp::op) ProdExp::exp)*
ProdExp = UnaryOpExp::exp ((MulOp::op / DivOp::op) UnaryOpExp::exp)*
UnaryOpExp = (SubOp::op / DerefOp::op / AddressOp::op / NotOp::op)* PrimaryExp::exp
PrimaryExp = ConstantExp::exp / VarExp::exp / ParenExp::exp / ArrayExp::exp / FuncExp::exp / SizeOfExp::exp
ConstantExp = RealExp::exp / IntExp::exp / StringExp::exp / BoolExp::exp

ArrayExp = "[" ExpList "]"
ParenExp = "(" Exp::exp ")"
SizeOfExp = "sizeof" "(" Exp::exp ")"
FuncExp = "(" FieldList::params ")" "=>" "(" FieldList::result ")" Stm
VarExp = Var

AndOp = "und"
OrOp = "oder"
EqOp = "ist"
NeOp = "ist" "nicht"
LtOp = "<"
LeOp = "<="
GtOp = ">"
GeOp = ">="
AddOp = "+"
SubOp = "-"
MulOp = "*"
DivOp = "/"
DerefOp = "*"
AddressOp = "&"
NotOp = "!"

IntExp = Integer
RealExp = Real
StringExp = String
BoolExp = True::bool / False::bool

StmList = Stm+
Stm = DecStm::stm / AssignStm::stm / CompoundStm::stm / IfStm::stm / WhileStm::stm / UntilStm::stm / RepeatStm::stm / BreakStm::stm / ContinueStm::stm / ReturnStm::stm / LoopStm::stm / ExpStm::stm
CompoundStm = "von" "hier" "aus" StmList "bis" "hierher" / "von" "hier" "aus" "bis" "hierher"
DecStm = Dec
AssignStm = NormalAssign::stm / AddAssign::stm / SubAssign::stm / MulAssign::stm / DivAssign::stm
IfStm = IfElseList
WhileStm = "Während" Exp Stm
UntilStm = "Bis" Exp Stm
RepeatStm = "Wiederholen" Exp Stm
BreakStm = "Ausbruch" ";"
ContinueStm = "Weiter" "."
ReturnStm = "Rückkehr" Exp "." / "Rückkehr" "."
LoopStm = "Schleife" Stm
ExpStm = Exp "."

NormalAssign = "Ersetze" Exp "für" Var "."
AddAssign = Exp "zu" Var "hinzufügen" "."
SubAssign = "Subtrahiere" Exp "von" Var "."
MulAssign = "Multipliziere" Var "mit" Exp "."
DivAssign = "Teilen" "Sie" Var "durch" Exp "."

IfElseList = If::ifelse ( ElseIf::ifelse )* Else::ifelse / If::ifelse (ElseIf::ifelse)*
If = "Wenn" Exp Stm
ElseIf = "Andernfalls" "Wenn" Exp Stm
Else = "Andernfalls" Stm

Type = PointerType::type / ArrayType::type
PrimaryType = IntType::type / ShortType::type / RealType::type / CharType::type / BoolType::type / NameType::type / ParenType::type / GenericsType::type

PointerType = PrimaryType "*"
ArrayType = PrimaryType ( "[" Exp::exp "]" )*
ParenType = "(" Type ")"
NameType = ID
GenericsType = ID "<" TypeList ">"
IntType = "Ganzzahl" !ID
ShortType = "Kurze" !ID
RealType = "Dezimal" !ID
CharType = "Buchstabe" !ID
BoolType = "Boolean" !ID

Var = PointerVar::var
ParenVar = "(" Var ")"
SimpleVar = ID
PrimaryVar = SimpleVar::var / ParenVar::var
SuffixVar = PrimaryVar ( CallSuffix::suffix / DotSuffix::suffix / ArrowSuffix::suffix / SubscriptSuffix::suffix )*
PointerVar = {("*")* SuffixVar : pointer}

CallSuffix = "(" ExpList::explist ")"
DotSuffix = "'s" ID
ArrowSuffix = "->" ID
SubscriptSuffix = "'s" Exp::exp ("th" / "nd" / "st") "element" / "[" Exp::exp "]"

IDList = ID ("," ID)*
ID = { !"bis " [㐀-龯ぁ-んァ-ヶa-zA-Z_ー] [㐀-龯ぁ-んァ-ヶa-zA-Z0-9０-９_ー]* " "* : id }
Integer = { ( "-" / "" ) [0-9]+ " "* : int }
Real = { [0-9]+ "." [0-9]+ " "* : real }
String = { "\"" ( !"\"" . )* "\"" : string }
True = "wahr"
False = "falsch"
