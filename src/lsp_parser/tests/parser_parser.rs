use std::path::Path;

use crate::lsp_parser::laze_parser::parser::LazeParser;

const WHILE_SIMPLE: &str = r##"関数: 実行 () => (){
    整数: a = 0;
    (a < 5) の間 {
        a += 1;
    }
}"##;

#[test]
fn simple() {
    let mut test_parser = LazeParser::new(Path::new("./parser_files/ja.peg"));
    let ast = test_parser.parse_direct(&WHILE_SIMPLE.to_string());
    let mut ast_string = String::new();
    let _ = std::fmt::write(&mut ast_string, format_args!("{:?}", ast));
    assert_eq!(
        ast_string,
        "DecList([Dec_ { pos: (0, 72), keywords: [(0, 2), (2, 3), (2, 3), (2, 3), (2, 4), (3, 4), (4, 5), (4, 5), (4, 5), (4, 6), (8, 9), (8, 9), (8, 9), (8, 10), (9, 10), (10, 11), (10, 11), (10, 11), (10, 12), (12, 13), (13, 14), (13, 14), (13, 14), (13, 15), (14, 15), (14, 15), (14, 15), (14, 16), (15, 16), (15, 16), (15, 16), (15, 17), (16, 17), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (21, 22), (21, 22), (21, 23), (72, 73), (72, 73), (72, 73), (72, 74)], data: Func(ID { pos: (4, 7), id: \"実行\" }, [], [], Stm_ { pos: (0, 72), keywords: [(0, 2), (2, 3), (2, 3), (2, 3), (2, 4), (3, 4), (4, 5), (4, 5), (4, 5), (4, 6), (8, 9), (8, 9), (8, 9), (8, 10), (9, 10), (10, 11), (10, 11), (10, 11), (10, 12), (12, 13), (13, 14), (13, 14), (13, 14), (13, 15), (14, 15), (14, 15), (14, 15), (14, 16), (15, 16), (15, 16), (15, 16), (15, 17), (16, 17), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (21, 22), (21, 22), (21, 23), (72, 73), (72, 73), (72, 73), (72, 74)], data: Compound([Stm_ { pos: (21, 36), keywords: [], data: Dec(Dec_ { pos: (21, 36), keywords: [(24, 25), (25, 26), (25, 26), (25, 26), (25, 27), (28, 29), (29, 30), (29, 30), (29, 30), (29, 31), (31, 32), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (36, 37), (36, 37), (36, 38)], data: Var(Var_ { pos: (25, 27), keywords: [], data: Simple(ID { pos: (25, 27), id: \"a\" }) }, Type_ { pos: (21, 23), keywords: [(21, 23), (23, 24), (23, 24), (23, 24), (23, 25)], data: Int }, ASTExp_ { pos: (29, 30), keywords: [], data: String(ASTString { pos: (29, 30), str: \"0\" }) }) }) }, Stm_ { pos: (36, 71), keywords: [(43, 44), (44, 45), (44, 45), (44, 45), (44, 46), (44, 46), (46, 47), (47, 48), (47, 48), (47, 48), (47, 49)], data: While(ASTExp_ { pos: (37, 42), keywords: [], data: BinOp([Oper { pos: (39, 41), data: Lt }], [ASTExp_ { pos: (37, 39), keywords: [], data: Var(Var_ { pos: (37, 39), keywords: [], data: Simple(ID { pos: (37, 39), id: \"a\" }) }) }, ASTExp_ { pos: (41, 42), keywords: [], data: String(ASTString { pos: (41, 42), str: \"5\" }) }]) }, Stm_ { pos: (47, 71), keywords: [(48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (57, 58), (57, 58), (57, 59), (70, 71), (70, 71), (71, 72), (71, 72), (71, 72), (71, 73)], data: Compound([Stm_ { pos: (57, 69), keywords: [(61, 62), (62, 63), (62, 63), (62, 63), (62, 64), (64, 65), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (69, 70), (69, 70), (69, 71)], data: Assign(Var_ { pos: (57, 59), keywords: [], data: Simple(ID { pos: (57, 59), id: \"a\" }) }, ASTExp_ { pos: (62, 63), keywords: [], data: String(ASTString { pos: (62, 63), str: \"1\" }) }, Add) }]) }) }]) }) }])"
    );
}
